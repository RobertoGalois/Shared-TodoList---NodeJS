/*
** gl_tempContentsContainer: a JQuery element to stock others JQuery elements
** by .append() them into it
*/
const gl_tempContentsContainer = $('<div>')
const gl_socket = io();
var   gl_todos = [];

/*
** switch function to know if front is in a todo modification process
** I prefer using this way instead of a global variable, not sure that is
** prettier but well, we'll see.
** id = id of the field being modifing
*/
const whoIsModifying = (function (id)
{
	let myStaticVar = -1;

	return function (id) {
		if(typeof (id) === typeof(myStaticVar)) {
			myStaticVar = id;
		}

		return (myStaticVar);
	};
})();

/*
** give the focus on the main add_todo <input> and select its content
*/
function selectAddEntryInput() {
	$('#add_entry_input').select();
}

function firstLoadTodoListInDOM(pTodoList) {
	let ulContainer = $('ul#todo_list');
		ulContainer.fadeOut(0);

	for (let i = 0, tempTodo = null; i < pTodoList.length; i++) {
		tempTodo = new TodoEl(pTodoList[i]);
		tempTodo.appendInList();
		gl_todos.unshift(tempTodo);
	}

	ulContainer.fadeIn(500);
	selectAddEntryInput();
	whoIsModifying(-1);
}

/*
** when you press 'key' on inputEl, it clicks buttonEl
*/
function pipeKeyWithButton(inputEl, buttonEl, key) {
	inputEl.keydown(function (e) {
		if(e.which === key) {
			buttonEl.click();
		}
	});
}

function formatDateTime(pValue) {
	pValue = parseInt(pValue);

	if (pValue < 10) {
		return ('0' + pValue);
	}

	return (pValue);
}

function formatTimeStamp(pTimestamp) {
	let date = new Date(pTimestamp);
	let retStr = 'le ' + 	formatDateTime(date.getDate()) + '/' +
							formatDateTime(date.getMonth() + 1) + '/' +
							formatDateTime(date.getFullYear()) + ' à ' +
							formatDateTime(date.getHours()) + 'h' +
							formatDateTime(date.getMinutes());

	return retStr;
}

/*
** Wrapper object, it is a <form> element to place in <li> to modify the Todo
*/
function FormReplaceEl(pTodoEl) {
	let thisFormReplaceEl = this;

	this.modId = parseInt(pTodoEl.todoInfos.id);
	this.spanTodo = pTodoEl.jQEl.find('span#span_' + this.modId);

	this.jQEl = $('<form></form>');
	this.inputTodoEl = $('<input type="text" value="' + this.spanTodo.text() + '" placeholder="(80 caractères maximum)" maxlength="80" required />').appendTo(this.jQEl);
	this.submitTodoBut = $('<input type="submit" value="OK" title="Valider" />').appendTo(this.jQEl);
	this.cancelTodoBut = $('<button title="Annuler">NO</button>').appendTo(this.jQEl);

	this.checkIfOtherIsInModif = function () {
		if (whoIsModifying() !== -1) {
			//unset field who is in modification
			let modifiedTodo = gl_todos.find((val, indx, arr) => (val.todoInfos.id === whoIsModifying()));

			modifiedTodo.jQEl.find('form').remove();
			modifiedTodo.append(gl_tempContentsContainer.children());
		}
	}

	/*
	** To append the form in the <li>
	*/
	this.append = function () {
		pTodoEl.spanEl.appendTo(gl_tempContentsContainer);
		pTodoEl.modButtonEl.appendTo(gl_tempContentsContainer);
		pTodoEl.delButtonEl.appendTo(gl_tempContentsContainer);

		this.jQEl.appendTo(pTodoEl.jQEl);
		this.inputTodoEl.select();
	}

	/*
	** To remove the forme from the <li>
	*/
	this.remove = function () {
		this.jQEl.remove();
	}

	/*
	** when user click on NO button
	*/
	this.cancelTodoBut.click( function (e) {
		e.preventDefault();
		thisFormReplaceEl.jQEl.remove();
		pTodoEl.append(gl_tempContentsContainer.children());
		selectAddEntryInput();
		whoIsModifying(-1);
	});

	/*
	** when user click on OK button
	*/
	this.submitTodoBut.click(function (e) {
		e.preventDefault();
		thisFormReplaceEl.jQEl.remove();
		whoIsModifying(-1);

		if (thisFormReplaceEl.inputTodoEl.val().trim() !== thisFormReplaceEl.spanTodo.text() && thisFormReplaceEl.inputTodoEl.val().trim() !== '') {
			gl_socket.emit('csIWantToModThisTodo', { todoId: thisFormReplaceEl.modId, todoString: thisFormReplaceEl.inputTodoEl.val() });

		} else {
			pTodoEl.append(gl_tempContentsContainer.children());
		}

		selectAddEntryInput();
	});

	/*
	** press escape do the same as click on NO button, enter, as OK button
	*/
	pipeKeyWithButton(this.inputTodoEl, this.cancelTodoBut, 27);
	pipeKeyWithButton(this.inputTodoEl, this.submitTodoBut, 13);
}

/*
** TodoEl is a wrapper object that contains
** the todo and all html objects to show in an <ul> element
*/
function TodoEl(pTodo) {
	let thisTodoEl = this;

	this.todoInfos = pTodo;

	this.jQEl = $('<li class="todo" id="todo_' + this.todoInfos.id + '"></li>');
	this.jQEl.append($('<img src="/imgs/list.png" />'));

	this.spanEl = $('<span id="span_' + this.todoInfos.id + '">' + this.todoInfos.todoString + '</span>').appendTo(this.jQEl);
	this.modButtonEl = $('<button class="mod_button" id="mod_' + this.todoInfos.id + '" title="Modifier">M</button>').appendTo(this.jQEl);
	this.delButtonEl = $('<button class="del_button" id="del_' + this.todoInfos.id + '" title="Supprimer">X</button>').appendTo(this.jQEl);


	this.delButtonEl.click(function () {
		gl_socket.emit('csIWantToDelThisTodo', { todoId: thisTodoEl.todoInfos.id });
		selectAddEntryInput();
	});

	this.modButtonEl.click(function () {
		let formReplace = new FormReplaceEl(thisTodoEl);

		formReplace.checkIfOtherIsInModif();
		whoIsModifying(thisTodoEl.todoInfos.id);
		formReplace.append();
	});

	//click on the span do the same as click on mod button
	this.spanEl.click(function (e) {
		thisTodoEl.modButtonEl.click();
	});

	this.fadeIn = function (pTime) { this.jQEl.fadeIn(pTime) }
	this.fadeOut = function (pTime) { this.jQEl.fadeOut(pTime) }
	this.show = function (pTime) { this.jQEl.show(pTime) }
	this.hide = function (pTime) { this.jQEl.hide(pTime) }
	this.slideToggle = function (pTime) { this.jQEl.slideToggle(pTime) }
	this.append = function (pEl) { this.jQEl.append(pEl) }
	this.appendTo = function (pEl) { this.jQEl.appendTo(pEl) }
	this.prepend = function (pEl) { this.jQEl.prepend(pEl) }
	this.prependTo = function (pEl) { this.jQEl.prependTo(pEl) }
	this.remove = function () { this.jQEl.remove() }

	this.getTooltipStr = function () {
		return 'Créée par: [' + this.todoInfos.createdBy +'] ' + formatTimeStamp(this.todoInfos.creationDate) +
	 			((this.todoInfos.lastUpdater === null && this.todoInfos.lastUpdated === null) ? '' : '\nModifiée par: [' + this.todoInfos.lastUpdater +'] ' + formatTimeStamp(this.todoInfos.lastUpdated));
	}

	this.updateTooltip = function () {
		this.jQEl.attr('title', this.getTooltipStr());
	}

	this.appendInList = function () {
		this.appendTo($('ul#todo_list'));
	}

	this.prependInList = function () {
		this.prependTo($('ul#todo_list'));
	}

	this.prependInListAnim = function () {
		this.fadeOut(0);
		this.prependInList();
		thisTodoEl.slideToggle(300);
	}

	this.removeFromList = function () {
		this.jQEl.remove();
	}

	this.removeFromListAnim = function () {
		this.jQEl.hide(300, function () {
			thisTodoEl.remove();
		});
	}

	this.setTodoString = function (pValue) {
		this.todoInfos.todoString = pValue;
		this.spanEl.html(pValue);
	}

	this.setLastUpdater = function (pValue) {
		this.todoInfos.lastUpdater = pValue;
		this.updateTooltip();
	}

	this.setLastUpdated = function (pValue) {
		this.todoInfos.lastUpdated = pValue;
		this.updateTooltip();
	}

	this.jQEl.attr('title', this.getTooltipStr());
}

/****************/
/***   MAIN   ***/
/****************/
$(function () {

	gl_socket.emit('csSendMeTodoList');
	selectAddEntryInput();

	/*
	** Manage the disconnection button
	*/
	$('button#disconnect').click(function () {
		window.location.href="/disconnect";
	});

	/*
	** Manage the validation form
	*/
	$('form').on('submit', function (e) {
		e.preventDefault();
		if (($('input#add_entry_input').val().trim()) !== '') {
			gl_socket.emit('csIWantToAddThisTodo', { todoInput: $('input#add_entry_input').val() });
		}

		$('input#add_entry_input').val('');
		selectAddEntryInput();
	});

	/************************
	** gl_socket MANAGEMENT *
	*************************/
	gl_socket.on('ssHereIsTodoList', function (data) {
		firstLoadTodoListInDOM(data.todoList);
	});

	gl_socket.on('ssNewAddedTodo', function (data) {
		let newTodoEl = new TodoEl(data.newTodo);
			newTodoEl.prependInListAnim();

		gl_todos.unshift(newTodoEl);
	});

	gl_socket.on('ssThisTodoHasBeenDeleted', function (data) {
		delTodoEl = gl_todos.find(function (value, index, arr) {
			return (value.todoInfos.id === data.delTodoId);
		});

		delTodoEl.removeFromListAnim();
		gl_todos = gl_todos.filter(function (value, index, arr) {
			return (value.todoInfos.id !== data.delTodoId);
		});
	});

	gl_socket.on('ssThisTodoHasBeenModified', function (data) {
		modTodoEl = gl_todos.find(function (value, index, arr) {
			return (value.todoInfos.id === data.modTodoId);
		});


		modTodoEl.jQEl.hide(500, function () {
			modTodoEl.setTodoString(data.modTodoString);
			modTodoEl.setLastUpdater(data.modTodoLastUpdater);
			modTodoEl.setLastUpdated(data.modTodoLastUpdated);
			modTodoEl.updateTooltip();
			modTodoEl.append(gl_tempContentsContainer.children());
			modTodoEl.slideToggle(500);
		});
	});
});
